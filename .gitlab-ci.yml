stages:
  - test 
  - train
  - evaluate
  - build_image

run_test:
  tags:
    - GPU
  stage: test
  image: nvcr.io/nvidia/tensorflow:22.04-tf2-py3
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  script:
    - export PYTHONPATH='./:$PYTHONPATH'
    - python main.py --stage prepare_data
    - pytest test/test.py

run_train:
  tags:
    - GPU
  stage: train
  image: nvcr.io/nvidia/tensorflow:22.04-tf2-py3
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  script: 
    - export PYTHONPATH='./:$PYTHONPATH'
    - python main.py --stage train

run_evaluate:
  tags:
    - GPU
  stage: evaluate
  image: nvcr.io/nvidia/tensorflow:22.04-tf2-py3
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  script: 
    - export PYTHONPATH='./:$PYTHONPATH'
    - python main.py --stage test

build_image:
  tags:
    - GPU-dind
  stage: build_image
  image: docker:20.10.16
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t 192.168.0.53:5000/cicd:test .
    - docker push 192.168.0.53:5000/cicd:test